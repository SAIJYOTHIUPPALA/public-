package com.infy.ekart.service.test;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import com.infy.ekart.dto.CartProductDTO;
import com.infy.ekart.dto.CustomerCartDTO;
import com.infy.ekart.dto.ProductDTO;
import com.infy.ekart.entity.CartProduct;
import com.infy.ekart.entity.CustomerCart;
import com.infy.ekart.exception.EKartException;
import com.infy.ekart.repository.CartProductRepository;
import com.infy.ekart.repository.CustomerCartRepository;
import com.infy.ekart.service.CustomerCartService;
import com.infy.ekart.service.CustomerCartServiceImpl;

@SpringBootTest
class CustomerCartServiceTest {
	
	// Write testcases here
	
	@Mock
	private CustomerCartRepository customerCartRepository;

	@Mock
	private CartProductRepository cartProductRepository;

	@InjectMocks
	CustomerCartService customerCartService = new CustomerCartServiceImpl();
	
	@Test
	public void getAllProductsValid1() throws EKartException {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(6000);
		product.setProductId(1000);
		product.setQuantity(1);
		set.add(product);

		cart.setCartProducts(set);
		cart.setCustomerEmailId("tom@infosys.com");
		Optional<CustomerCart> custCart = Optional.ofNullable(cart);
		Mockito.when(customerCartRepository.findByCustomerEmailId("tom@infosys.com")).thenReturn(custCart);
		 CustomerCartDTO cartDTO = new CustomerCartDTO();
		cartDTO.setCartId(cart.getCartId());
		Set<CartProductDTO> set1 = new HashSet<>();
		CartProductDTO product1 = new CartProductDTO();
		product1.setCartProductId(product.getCartProductId());
		ProductDTO prod = new ProductDTO();
		prod.setProductId(product.getProductId());
		prod.setBrand("Nicon");
		product1.setProduct(prod);
		set1.add(product1);
		cartDTO.setCartProducts(set1);
		cartDTO.setCustomerEmailId(cart.getCustomerEmailId());
		Integer exp = set1.stream().findFirst().get().getCartProductId();
		Integer actual = customerCartService.getProductsFromCart("tom@infosys.com").stream().findFirst().get().getCartProductId();

		Assertions.assertEquals(exp, actual);
	

	}
	
	@Test
	public void getAllProductsValid2() throws EKartException {
		
		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(6000);
		product.setProductId(1000);
		product.setQuantity(1);
		set.add(product);
		//Optional<CustomerCart> custCart = Optional.ofNullable(cart);
		cart.setCartProducts(set);
		cart.setCustomerEmailId("tom@infosys.com");
		Optional<CustomerCart> custCart = Optional.ofNullable(cart);
		Mockito.when(customerCartRepository.findByCustomerEmailId("tom@infosys.com")).thenReturn(custCart);

		Set<CartProductDTO> set2 = customerCartService.getProductsFromCart("tom@infosys.com");
		
		Assertions.assertFalse(set2.isEmpty());
		
		
	}
	@Test
	public void addProductToCartValidTest() throws EKartException {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(6000);
		product.setProductId(1000);
		product.setQuantity(1);
		set.add(product);

		cart.setCartProducts(set);
		cart.setCustomerEmailId("tom@infosys.com");
		Mockito.when(customerCartRepository.findByCustomerEmailId("tom@infosys.com")).thenReturn(Optional.of(cart));
		
		CustomerCartDTO cartDTO = new CustomerCartDTO();
		cartDTO.setCartId(cart.getCartId());
		Set<CartProductDTO> set1 = new HashSet<>();
		CartProductDTO product1 = new CartProductDTO();
		product1.setCartProductId(product.getCartProductId());
		ProductDTO prod = new ProductDTO();
		prod.setProductId(product.getProductId());
		product1.setQuantity(product.getQuantity());
		prod.setBrand("Nicon");
		product1.setProduct(prod);
		set1.add(product1);
		cartDTO.setCartProducts(set1);
		cartDTO.setCustomerEmailId(cart.getCustomerEmailId());
		
		Assertions.assertEquals(cart.getCartId(), customerCartService.addProductToCart(cartDTO) );
		
		

	}
	@Test
	public void getProductFromCartInvalidTest1() throws EKartException {

		// write your logic here
		CustomerCart cart = null;
		Mockito.when(customerCartRepository.findByCustomerEmailId("tom@infosys.com")).thenReturn(Optional.ofNullable(cart));
		EKartException e = Assertions.assertThrows(EKartException.class, ()-> customerCartService.getProductsFromCart("tom@infosys.com"));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", e.getMessage());

	}

	@Test
	public void getProductFromCartInvalidTest2() throws EKartException {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(6000);
		product.setProductId(1000);
		product.setQuantity(1);
		

		cart.setCartProducts(set);
		cart.setCustomerEmailId("tom@infosys.com");
		
		Mockito.when(customerCartRepository.findByCustomerEmailId("tom@infosys.com")).thenReturn(Optional.of(cart));
		EKartException e = Assertions.assertThrows(EKartException.class, ()-> customerCartService.getProductsFromCart("tom@infosys.com"));
		Assertions.assertEquals("CustomerCartService.NO_PRODUCT_ADDED_TO_CART", e.getMessage());
		

	}
	
	@Test
	public void deleteProductFromCartValid1() throws EKartException {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(6000);
		product.setProductId(1000);
		product.setQuantity(1);
		set.add(product);
		

		cart.setCartProducts(set);
		cart.setCustomerEmailId("tom@infosys.com");
		Mockito.when(customerCartRepository.findByCustomerEmailId(cart.getCustomerEmailId())).thenReturn(Optional.ofNullable(cart));
		customerCartService.deleteProductFromCart(cart.getCustomerEmailId(),product.getProductId());
		
		Assertions.assertFalse(cart.getCartProducts().contains(product));
		
		
	}

	@Test
	public void deleteProductFromCartValid2() throws EKartException {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(1004);
		product.setProductId(20000);
		product.setQuantity(129);
		set.add(product);
		

		cart.setCartProducts(set);
		cart.setCustomerEmailId("MSD@infosys.com");
		Mockito.when(customerCartRepository.findByCustomerEmailId(cart.getCustomerEmailId())).thenReturn(Optional.ofNullable(cart));
		customerCartService.deleteProductFromCart(cart.getCustomerEmailId(),product.getProductId());
		
		Assertions.assertFalse(cart.getCartProducts().contains(product));


	}

	@Test
	public void deleteProductFromCartInValidTest1() {

		// write your logic here
		CustomerCart cart = new CustomerCart();
		cart.setCartId(3000);
		Set<CartProduct> set = new HashSet<>();
		CartProduct product = new CartProduct();
		product.setCartProductId(1004);
		product.setProductId(20000);
		product.setQuantity(129);
	
		

		cart.setCartProducts(set);
		cart.setCustomerEmailId("MSD@infosys.com");
		Mockito.when(customerCartRepository.findByCustomerEmailId(cart.getCustomerEmailId())).thenReturn(Optional.ofNullable(cart));
		EKartException e = Assertions.assertThrows(EKartException.class,()-> customerCartService.deleteProductFromCart(cart.getCustomerEmailId(),product.getProductId()));
		Assertions.assertEquals("CustomerCartService.NO_PRODUCT_ADDED_TO_CART", e.getMessage());

	}

	@Test
	public void deleteProductFromCartInValidTest2() {

		// write your logic here
		CustomerCart cart =null;
		Optional<CustomerCart> cart1 = Optional.ofNullable(cart);

		Mockito.when(customerCartRepository.findByCustomerEmailId("MSD@infosys.com")).thenReturn(cart1);
		EKartException e = Assertions.assertThrows(EKartException.class,()-> customerCartService.deleteProductFromCart("MSD@infosys.com",1000));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", e.getMessage());
		

	}
	
	@Test
	public void modifyQuantityOfProductInCartInValidTest1() {
		String email = "name@infosys.com";
		Integer productId = 135;
		Integer quantity = 1;
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.modifyQuantityOfProductInCart(email, productId, quantity));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}
	
	@Test
	public void modifyQuantityOfProductInCartInvalidTest2() {
		String email = "name@infosys.com";
		Integer productId = 135;
		Integer quantity = 4;
		CustomerCart customerCart = new CustomerCart();
		customerCart.setCustomerEmailId(email);
		Set<CartProduct> cartProductSet = new HashSet<>();
		CartProduct cartProduct = new CartProduct();
		cartProduct.setProductId(132);
		cartProduct.setQuantity(87);
		cartProductSet.add(cartProduct);
		customerCart.setCartProducts(cartProductSet);
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString()))
				.thenReturn(Optional.of(customerCart));
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.modifyQuantityOfProductInCart(email, productId, quantity));
		Assertions.assertEquals("CustomerCartService.PRODUCT_ALREADY_NOT_AVAILABLE", exp.getMessage());

	}

	@Test
	public void modifyQuantityOfProductInCartInvalidTest3() {

		String email = "name@infosys.com";
		Integer productId = 135;
		Integer quantity = 4;
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.modifyQuantityOfProductInCart(email, productId, quantity));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}

	@Test
	public void modifyQuantityOfProductInCartInValidTest4() {
		String email = "name@infosys.com";
		Integer productId = 135;
		Integer quantity = 1;
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.modifyQuantityOfProductInCart(email, productId, quantity));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}

	@Test
	public void deleteAllProductsFromCartValidTest() {
		String email = "name@infosys.com";
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.deleteAllProductsFromCart(email));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}
	@Test
	public void deleteAllProductsFromCartValidTest1() {
		String email = "name@infosys.com";
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.deleteAllProductsFromCart(email));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}

	@Test
	public void deleteAllProductFromCartInValidTest1() {
		String email = "name@infosys.com";
		CustomerCart customerCart = new CustomerCart();
		customerCart.setCustomerEmailId(email);
		Set<CartProduct> cartProductSet = new HashSet<>();
		customerCart.setCartProducts(cartProductSet);
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString()))
				.thenReturn(Optional.of(customerCart));
		EKartException exp = Assertions.assertThrows(EKartException.class,
				() -> customerCartService.deleteAllProductsFromCart(email));
		Assertions.assertEquals("CustomerCartService.NO_PRODUCT_ADDED_TO_CART", exp.getMessage());

	}

	@Test
	public void modifyQuantityOfProductInCartInValidTest2() {
		String email = "name@infosys.com";
		Integer productId = 135;
		Integer quantity = 4;
		CustomerCart customerCart = new CustomerCart();
		customerCart.setCustomerEmailId(email);
		Set<CartProduct> cartProductSet = new HashSet<>();
		customerCart.setCartProducts(cartProductSet);
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString()))
				.thenReturn(Optional.of(customerCart));
		EKartException exp = Assertions.assertThrows(EKartException.class,() -> customerCartService.modifyQuantityOfProductInCart(email, productId, quantity));
		Assertions.assertEquals("CustomerCartService.NO_PRODUCT_ADDED_TO_CART", exp.getMessage());

	}	

	@Test
	public void deleteAllProductsFromCartIValidTest3() {
		String email = "name@infosys.com";
		Mockito.when(customerCartRepository.findByCustomerEmailId(Mockito.anyString())).thenReturn(Optional.empty());
		EKartException exp = Assertions.assertThrows(EKartException.class,() -> customerCartService.deleteAllProductsFromCart(email));
		Assertions.assertEquals("CustomerCartService.NO_CART_FOUND", exp.getMessage());
	}

}
